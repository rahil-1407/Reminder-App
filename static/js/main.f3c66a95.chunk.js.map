{"version":3,"sources":["components/Form.js","components/ReminderList.js","actions/actionTypes.js","actions/actionCreator.js","components/MainComponent.js","App.js","reportWebVitals.js","reducers/reducer.js","reducers/index.js","store.js","localStorage.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","form","marginTop","width","Form","reminder","handleChange","handleSubmit","clearAll","classes","align","className","TextField","type","placeholder","name","onChange","value","message","dateTime","label","textField","InputLabelProps","shrink","Button","variant","color","onClick","ReminderList","list","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","item","index","moment","Date","fromNow","format","Types","ActionCreators","pastReminder","payload","futureReminder","MainComponent","dispatch","useDispatch","useSelector","state","reducer","useState","setReminder","updateReminderList","updatedFutureReminder","i","length","push","useEffect","timerId","setInterval","clearInterval","AppBar","position","Typography","e","target","preventDefault","Grid","container","spacing","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3c66a95.chunk.js","sourcesContent":["import React from 'react'\nimport { TextField, Button, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  form: {\n    marginTop: 30,\n    width: '50',\n  },\n}))\n\nconst Form = ({ reminder, handleChange, handleSubmit, clearAll }) => {\n  const classes = useStyles()\n  return (\n    <form align=\"center\" className={classes.form}>\n      <TextField\n        type=\"text\"\n        placeholder=\"Make a reminder\"\n        name=\"message\"\n        onChange={handleChange}\n        value={reminder.message}\n      />\n      <br /> <br />\n      <TextField\n        name=\"dateTime\"\n        value={reminder.dateTime}\n        label=\"Select date and time\"\n        type=\"datetime-local\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleChange}\n      />\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        Add Reminder\n      </Button>{' '}\n      <br /> <br />\n      <Button variant=\"contained\" color=\"secondary\" onClick={clearAll}>\n        Clear All\n      </Button>\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core'\nimport moment from 'moment'\n\nconst ReminderList = ({ type, list }) => {\n  return (\n    <TableContainer>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>{type} Reminders</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableHead>\n          <TableRow>\n            <TableCell>Reminder Label</TableCell>\n            <TableCell align=\"right\">\n              {type === 'Past' ? 'Elapsed' : 'Get Ready in'}\n            </TableCell>\n            <TableCell align=\"right\">Due Date and Time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map((item,index) => (\n            <TableRow key={index}>\n              <TableCell align=\"center\">{item.message}</TableCell>\n              <TableCell align=\"right\">\n                {moment(new Date(item.dateTime)).fromNow()}\n              </TableCell>\n              <TableCell align=\"right\">\n                {moment(item.dateTime).format('MMMM Do YYYY, h:mm:ss a')}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ReminderList\n","export const Types = {\n  UPDATE_PAST: 'UPDATE_PAST_REMINDER_TABLE',\n  UPDATE_FUTURE: 'UPDATE_FUTURE_REMINDER_TABLE',\n}\n","import { Types } from './actionTypes'\n\nexport const ActionCreators = {\n  updatePast: (pastReminder) => {\n    return {\n      type: Types.UPDATE_PAST,\n      payload: pastReminder,\n    }\n  },\n  updateFuture: (futureReminder) => {\n    return {\n      type: Types.UPDATE_FUTURE,\n      payload: futureReminder,\n    }\n  },\n}\n","import React from 'react'\nimport Form from './Form'\nimport ReminderList from './ReminderList'\nimport moment from 'moment'\nimport { useState, useEffect } from 'react'\nimport { AppBar, Grid, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ActionCreators } from '../actions/actionCreator'\n\nconst MainComponent = () => {\n  const dispatch = useDispatch()\n  const { pastReminder, futureReminder } = useSelector((state) => state.reducer)\n\n  const [reminder, setReminder] = useState({\n    message: '',\n    dateTime: '',\n  })\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setReminder({\n      ...reminder,\n      [name]: value,\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (new Date() >= moment(reminder.dateTime)) {\n      pastReminder.push(reminder)\n      dispatch(ActionCreators.updatePast(pastReminder))\n    } else {\n      futureReminder.push(reminder)\n      dispatch(ActionCreators.updateFuture(futureReminder))\n    }\n    setReminder({\n      message: '',\n      dateTime: '',\n    })\n  }\n\n  const updateReminderList = () => {\n    const updatedFutureReminder = []\n    for (let i = 0; i < futureReminder.length; i++) {\n      let item = futureReminder[i]\n      if (new Date() >= moment(item.dateTime)) {\n        pastReminder.push(item)\n      } else {\n        updatedFutureReminder.push(item)\n      }\n    }\n    dispatch(ActionCreators.updateFuture(updatedFutureReminder))\n    dispatch(ActionCreators.updatePast(pastReminder))\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(updateReminderList, 1000)\n    return () => clearInterval(timerId)\n  })\n\n  const clearAll = () => {\n    dispatch(ActionCreators.updatePast([]))\n    dispatch(ActionCreators.updateFuture([]))\n  }\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h5\" align=\"center\">\n          Reminder App\n        </Typography>\n      </AppBar>\n      <Form\n        clearAll={clearAll}\n        reminder={reminder}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <Grid container spacing={10} justifyContent=\"center\">\n        <Grid item>\n          <ReminderList type=\"Past\" list={pastReminder} />\n        </Grid>\n        <Grid item>\n          <ReminderList type=\"Future\" list={futureReminder} />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default MainComponent\n","import './App.css';\nimport MainComponent  from './components/MainComponent';\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Types } from '../actions/actionTypes'\n\nconst initialState = {\n  pastReminder: [],\n  futureReminder: [],\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.UPDATE_PAST:\n      return {\n        ...state,\n        pastReminder: action.payload,\n      }\n    case Types.UPDATE_FUTURE:\n      return {\n        ...state,\n        futureReminder: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import reducer from './reducer'\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n  reducer,\n})\n\nexport default rootReducer\n","import rootReducer from './reducers/index'\nimport { createStore } from 'redux'\nimport { loadState, saveState } from './localStorage'\n\nconst persistedState = loadState()\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n)\n\nstore.subscribe(() => {\n  saveState({ reducer: store.getState().reducer })\n})\n\nexport default store\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}