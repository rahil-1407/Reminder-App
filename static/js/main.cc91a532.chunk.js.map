{"version":3,"sources":["components/Form.js","components/PastMadeReminder.js","components/FutureMadeReminder.js","components/MainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","form","marginTop","width","Form","reminder","handleChange","handleSubmit","classes","align","className","TextField","type","placeholder","name","onChange","value","message","dateTime","label","defaultValue","textField","InputLabelProps","shrink","Button","variant","color","onClick","table","PastMadeReminder","pastReminder","CssBaseline","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","item","displayText","moment","format","maxWidth","FutureMadeReminder","futureReminder","MainComponent","useState","setReminder","setPastReminder","setFutureReminder","updateReminderTable","updatedFutureReminder","filter","dueDate","Date","fromNow","includes","push","updatedPastReminder","useEffect","timerId","setInterval","clearInterval","AppBar","position","Typography","e","target","preventDefault","console","log","Grid","container","spacing","justify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc91a532.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  form: {\n    marginTop: 30,\n    width: '50',\n  },\n}))\n\nconst Form = ({ reminder, handleChange, handleSubmit }) => {\n  const classes = useStyles()\n  return (\n    <form align=\"center\" className={classes.form}>\n      <TextField\n        type=\"text\"\n        placeholder=\"Make a reminder\"\n        name=\"message\"\n        onChange={handleChange}\n        value={reminder.message}\n      />{' '}\n      <br /> <br />\n      <TextField\n        name=\"dateTime\"\n        value={reminder.dateTime}\n        label=\"Select date and time\"\n        type=\"datetime-local\"\n        defaultValue=\"2017-05-24T10:30\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleChange}\n      />\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        Add Reminder\n      </Button>\n      <br /> <br />\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport { CssBaseline } from '@material-ui/core'\nimport moment from 'moment'\n\nconst useStyles = makeStyles({\n  table: {\n    width: '100%',\n  },\n})\n\nconst PastMadeReminder = ({ pastReminder }) => {\n  const classes = useStyles()\n  return (\n    <>\n      <CssBaseline />\n      <TableContainer className={classes.table}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Past Reminders</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableHead>\n            <TableRow>\n              <TableCell>Reminder Label</TableCell>\n              <TableCell align=\"right\">Elapsed</TableCell>\n              <TableCell align=\"right\">Due Date and Time</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pastReminder.map((item) => (\n              <TableRow>\n                <TableCell align=\"center\">{item.message}</TableCell>\n                <TableCell align=\"right\">{item.displayText}</TableCell>\n                <TableCell align=\"right\">\n                  {moment(item.dateTime).format('MMMM Do YYYY, h:mm:ss a')}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\n\nexport default PastMadeReminder\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport { CssBaseline } from '@material-ui/core'\nimport moment from 'moment'\n\nconst useStyles = makeStyles({\n  table: {\n    maxWidth: '100%',\n  },\n})\n\nconst FutureMadeReminder = ({ futureReminder }) => {\n  const classes = useStyles()\n  return (\n    <>\n      <CssBaseline />\n      <TableContainer className={classes.table}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Future Reminders</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableHead>\n            <TableRow>\n              <TableCell>Reminder Label</TableCell>\n              <TableCell align=\"right\">Get Ready in</TableCell>\n              <TableCell align=\"right\">Due Date and Time</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {futureReminder.map((item) => (\n              <TableRow>\n                <TableCell align=\"center\">{item.message}</TableCell>\n                <TableCell align=\"right\">{item.displayText}</TableCell>\n                <TableCell align=\"right\">\n                  {moment(item.dateTime).format('MMMM Do YYYY, h:mm:ss a')}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\n\nexport default FutureMadeReminder\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { AppBar, Grid } from '@material-ui/core'\nimport Typography from '@material-ui/core/Typography'\nimport Form from './Form'\nimport moment from 'moment'\nimport PastMadeReminder from './PastMadeReminder'\nimport FutureMadeReminder from './FutureMadeReminder'\n\nconst MainComponent = () => {\n  const [reminder, setReminder] = useState({\n    message: '',\n    dateTime: '',\n  })\n\n  const [pastReminder, setPastReminder] = useState([])\n  const [futureReminder, setFutureReminder] = useState([])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setReminder({\n      ...reminder,\n      [name]: value,\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    const dueDate = moment(new Date(reminder.dateTime)).fromNow()\n\n    if (dueDate.includes('ago')) {\n      pastReminder.push({\n        message: reminder.message,\n        displayText: dueDate,\n        dateTime: reminder.dateTime,\n      })\n      setPastReminder(pastReminder)\n    } else {\n      futureReminder.push({\n        message: reminder.message,\n        displayText: dueDate,\n        dateTime: reminder.dateTime,\n      })\n      setFutureReminder(futureReminder)\n    }\n    setReminder({\n      message: '',\n      dateTime: '',\n    })\n    console.log(reminder)\n    console.log(pastReminder)\n    console.log(futureReminder)\n  }\n\n  const updateReminderTable = () => {\n    const updatedFutureReminder = futureReminder.filter((item) => {\n      const dueDate = moment(new Date(item.dateTime)).fromNow()\n      if (dueDate.includes('ago')) {\n        pastReminder.push(item)\n      } else return { ...item, displayText: dueDate }\n    })\n    setFutureReminder(updatedFutureReminder)\n\n    const updatedPastReminder = pastReminder.map((item) => {\n      const dueDate = moment(new Date(item.dateTime)).fromNow()\n      return { ...item, displayText: dueDate }\n    })\n    setPastReminder(updatedPastReminder)\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(updateReminderTable, 1000)\n    return () => clearInterval(timerId)\n  })\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h5\" align=\"center\">\n          Reminder App\n        </Typography>\n      </AppBar>\n      <Form\n        reminder={reminder}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <Grid container spacing={10} justify=\"center\">\n        <Grid item>\n          <PastMadeReminder pastReminder={pastReminder} />\n        </Grid>\n        <Grid item>\n          <FutureMadeReminder futureReminder={futureReminder} />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default MainComponent\n","import './App.css';\nimport MainComponent from './components/MainComponent';\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}