{"version":3,"sources":["components/Form.js","components/ReminderList.js","actions/actionTypes.js","actions/actionCreator.js","components/ParentComponent.js","App.js","reportWebVitals.js","reducers/reducer.js","reducers/index.js","store.js","localStorage.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","form","marginTop","width","Form","reminder","handleChange","handleSubmit","classes","align","className","TextField","type","placeholder","name","onChange","value","message","dateTime","label","defaultValue","textField","InputLabelProps","shrink","Button","variant","color","onClick","table","ReminderList","List","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","item","moment","Date","fromNow","format","Types","ActionCreators","pastReminder","payload","futureReminder","ParentComponent","dispatch","useDispatch","useSelector","state","reducer","useState","setReminder","updateReminderList","updatedFutureReminder","filter","push","useEffect","timerId","setInterval","clearInterval","AppBar","position","Typography","e","target","preventDefault","Grid","container","spacing","justify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","rootReducer","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ea93f29.chunk.js","sourcesContent":["import React from 'react'\nimport { TextField, Button, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  form: {\n    marginTop: 30,\n    width: '50',\n  },\n}))\n\nconst Form = ({ reminder, handleChange, handleSubmit }) => {\n  const classes = useStyles()\n  return (\n    <form align=\"center\" className={classes.form}>\n      <TextField\n        type=\"text\"\n        placeholder=\"Make a reminder\"\n        name=\"message\"\n        onChange={handleChange}\n        value={reminder.message}\n      />\n      <br /> <br />\n      <TextField\n        name=\"dateTime\"\n        value={reminder.dateTime}\n        label=\"Select date and time\"\n        type=\"datetime-local\"\n        defaultValue=\"2017-05-24T10:30\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleChange}\n      />\n      <br /> <br />\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n        Add Reminder\n      </Button>\n      <br /> <br />\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  makeStyles,\n} from '@material-ui/core'\nimport moment from 'moment'\n\nconst useStyles = makeStyles({\n  table: {\n    width: '100%',\n  },\n})\n\nconst ReminderList = ({ type, List }) => {\n  const classes = useStyles()\n  return (\n    <TableContainer className={classes.table}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              {type === 'Past' ? 'Past Reminders' : 'Future Reminders'}\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableHead>\n          <TableRow>\n            <TableCell>Reminder Label</TableCell>\n            <TableCell align=\"right\">\n              {type === 'Past' ? 'Elapsed' : 'Get Ready in'}\n            </TableCell>\n            <TableCell align=\"right\">Due Date and Time</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {List.map((item) => (\n            <TableRow>\n              <TableCell align=\"center\">{item.message}</TableCell>\n              <TableCell align=\"right\">\n                {moment(new Date(item.dateTime)).fromNow()}\n              </TableCell>\n              <TableCell align=\"right\">\n                {moment(item.dateTime).format('MMMM Do YYYY, h:mm:ss a')}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default ReminderList\n","export const Types = {\n  UPDATE_PAST: 'UPDATE_PAST_REMINDER_TABLE',\n  UPDATE_FUTURE: 'UPDATE_FUTURE_REMINDER_TABLE',\n}\n","import { Types } from './actionTypes'\n\nexport const ActionCreators = {\n  updatePast: (pastReminder) => {\n    return {\n      type: Types.UPDATE_PAST,\n      payload: pastReminder,\n    }\n  },\n  updateFuture: (futureReminder) => {\n    return {\n      type: Types.UPDATE_FUTURE,\n      payload: futureReminder,\n    }\n  },\n}\n","import React from 'react'\nimport Form from './Form'\nimport ReminderList from './ReminderList'\nimport moment from 'moment'\nimport { useState, useEffect } from 'react'\nimport { AppBar, Grid, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ActionCreators } from '../actions/actionCreator'\n\nconst ParentComponent = () => {\n  const dispatch = useDispatch()\n  const { pastReminder, futureReminder } = useSelector((state) => state.reducer)\n\n  const [reminder, setReminder] = useState({\n    message: '',\n    dateTime: '',\n  })\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setReminder({\n      ...reminder,\n      [name]: value,\n    })\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (new Date() >= moment(reminder.dateTime)) {\n      pastReminder.push({\n        message: reminder.message,\n        dateTime: reminder.dateTime,\n      })\n      dispatch(ActionCreators.updatePast(pastReminder))\n    } else {\n      futureReminder.push({\n        message: reminder.message,\n        dateTime: reminder.dateTime,\n      })\n      dispatch(ActionCreators.updateFuture(futureReminder))\n    }\n    setReminder({\n      message: '',\n      dateTime: '',\n    })\n  }\n\n  const updateReminderList = () => {\n    const updatedFutureReminder = futureReminder.filter((item) => {\n      if (new Date() >= moment(item.dateTime)) {\n        pastReminder.push(item)\n      } else return { item }\n    })\n    dispatch(ActionCreators.updateFuture(updatedFutureReminder))\n    dispatch(ActionCreators.updatePast(pastReminder))\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(updateReminderList, 1000)\n    return () => clearInterval(timerId)\n  })\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h5\" align=\"center\">\n          Reminder App\n        </Typography>\n      </AppBar>\n      <Form\n        reminder={reminder}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <Grid container spacing={10} justify=\"center\">\n        <Grid item>\n          <ReminderList type=\"Past\" List={pastReminder} />\n        </Grid>\n        <Grid item>\n          <ReminderList type=\"Future\" List={futureReminder} />\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default ParentComponent\n","import './App.css';\nimport ParentComponent  from './components/ParentComponent';\n\nfunction App() {\n  return (\n    <ParentComponent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Types } from '../actions/actionTypes'\n\nconst initialState = {\n  pastReminder: [],\n  futureReminder: [],\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Types.UPDATE_PAST:\n      return {\n        ...state,\n        pastReminder: action.payload,\n      }\n    case Types.UPDATE_FUTURE:\n      return {\n        ...state,\n        futureReminder: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import reducer from './reducer'\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n  reducer,\n})\n\nexport default rootReducer\n","import rootReducer from './reducers/index'\nimport { createStore } from 'redux'\nimport { loadState, saveState } from './localStorage'\n\nconst persistedState = loadState()\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n)\n\nstore.subscribe(() => {\n  saveState({ reducer: store.getState().reducer })\n})\n\nexport default store\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}